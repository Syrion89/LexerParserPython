/* The following code was generated by JFlex 1.6.1 */

/*-***
 *
 * This file defines a stand-alone lexical analyzer for a subset of the Pascal
 * programming language.  This is the same lexer that will later be integrated
 * with a CUP-based parser.  Here the lexer is driven by the simple Java test
 * program in ./PascalLexerTest.java, q.v.  See 330 Lecture Notes 2 and the
 * Assignment 2 writeup for further discussion.
 *
 */


import java_cup.runtime.*;
import java.util.Stack;
import java.util.HashMap;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/device/Desktop/Python/python.jflex</tt>
 */
class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INDENTATION = 2;
  public static final int SHORT_STRING_S = 4;
  public static final int SHORT_STRING_D = 6;
  public static final int LONG_STRING_S = 8;
  public static final int LONG_STRING_D = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\36\1\21\1\1\1\6\1\6\1\2\3\37\17\36\1\11\1\102"+
    "\1\115\1\10\1\53\1\72\1\75\1\114\1\103\1\104\1\70\1\47"+
    "\1\111\1\50\1\51\1\71\1\42\1\44\6\24\2\3\1\20\1\112"+
    "\1\73\1\101\1\74\1\53\1\113\1\27\1\35\2\27\1\46\1\57"+
    "\3\4\1\52\1\4\1\41\1\4\1\61\1\43\2\4\1\32\1\4"+
    "\1\62\1\33\2\4\1\25\2\4\1\105\1\22\1\106\1\77\1\5"+
    "\1\53\1\60\1\34\1\12\1\14\1\45\1\30\1\17\1\67\1\15"+
    "\1\52\1\63\1\40\1\65\1\16\1\13\1\56\1\4\1\31\1\54"+
    "\1\55\1\23\1\116\1\66\1\26\1\64\1\4\1\107\1\76\1\110"+
    "\1\100\1\36\5\0\1\7\u1fa2\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\4\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\6\5\1\10\1\11\1\12\6\5\1\4\1\5\1\13"+
    "\1\14\1\15\1\16\10\5\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\2\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\2\44\1\45\1\46\1\47\1\1\1\50"+
    "\1\51\1\52\1\53\1\54\1\1\1\50\2\1\1\52"+
    "\1\55\1\0\1\56\1\57\1\0\1\6\1\0\2\5"+
    "\1\60\1\5\1\61\1\62\1\63\12\5\2\0\1\4"+
    "\2\0\2\5\1\64\1\65\1\66\5\5\1\67\5\5"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\3\0"+
    "\1\107\1\110\3\0\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\3\0\1\123\1\124"+
    "\1\125\1\126\1\127\1\130\1\131\1\132\2\0\1\56"+
    "\2\0\1\6\1\0\2\5\1\133\1\134\1\0\2\5"+
    "\1\135\1\5\1\136\6\5\3\4\4\5\1\137\3\5"+
    "\1\140\6\5\1\141\1\142\1\143\1\144\1\145\1\146"+
    "\10\0\1\6\2\5\1\0\2\5\1\0\2\5\1\147"+
    "\5\5\1\150\1\151\1\152\1\5\1\153\2\5\1\154"+
    "\1\155\1\5\1\156\1\5\1\0\1\157\1\160\1\0"+
    "\1\161\1\162\1\0\1\6\1\5\1\163\1\0\2\5"+
    "\1\0\3\5\1\164\1\165\2\5\1\166\1\167\1\5"+
    "\1\170\1\171\3\0\1\6\1\5\1\172\1\173\1\5"+
    "\1\174\1\175\1\5\1\176\1\177\1\200\1\201\1\202"+
    "\1\203\1\0\1\6\2\5\1\204\3\0\1\205\1\206"+
    "\1\207\4\0\1\202\1\203";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u01da"+
    "\0\u0229\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452"+
    "\0\u04a1\0\u04f0\0\u01da\0\u01da\0\u01da\0\u053f\0\u058e\0\u05dd"+
    "\0\u062c\0\u067b\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855"+
    "\0\u01da\0\u08a4\0\u08f3\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e"+
    "\0\u0acd\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6"+
    "\0\u0d45\0\u01da\0\u0d94\0\u0de3\0\u01da\0\u01da\0\u01da\0\u01da"+
    "\0\u01da\0\u01da\0\u01da\0\u01da\0\u01da\0\u0e32\0\u0e81\0\u01da"+
    "\0\u0ed0\0\u01da\0\u01da\0\u01da\0\u0f1f\0\u0f6e\0\u01da\0\u01da"+
    "\0\u01da\0\u01da\0\u0fbd\0\u100c\0\u105b\0\u01da\0\u10aa\0\u01da"+
    "\0\u10f9\0\u1148\0\u01da\0\u1197\0\u11e6\0\u1235\0\u1284\0\u12d3"+
    "\0\u0278\0\u1322\0\u0278\0\u0278\0\u1371\0\u13c0\0\u140f\0\u145e"+
    "\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6"+
    "\0\u1725\0\u1774\0\u17c3\0\u1812\0\u1861\0\u18b0\0\u01da\0\u01da"+
    "\0\u01da\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9"+
    "\0\u1b28\0\u1b77\0\u1bc6\0\u1c15\0\u1c64\0\u01da\0\u1cb3\0\u01da"+
    "\0\u01da\0\u1d02\0\u01da\0\u01da\0\u1d51\0\u01da\0\u01da\0\u01da"+
    "\0\u01da\0\u01da\0\u01da\0\u1da0\0\u1def\0\u1e3e\0\u01da\0\u01da"+
    "\0\u1e8d\0\u1edc\0\u1f2b\0\u01da\0\u01da\0\u01da\0\u01da\0\u01da"+
    "\0\u01da\0\u01da\0\u01da\0\u01da\0\u01da\0\u1f7a\0\u1fc9\0\u2018"+
    "\0\u01da\0\u01da\0\u01da\0\u01da\0\u01da\0\u01da\0\u01da\0\u01da"+
    "\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290"+
    "\0\u22df\0\u0278\0\u0278\0\u232e\0\u237d\0\u23cc\0\u241b\0\u246a"+
    "\0\u0278\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693"+
    "\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e\0\u286d\0\u0278\0\u28bc"+
    "\0\u290b\0\u295a\0\u0278\0\u29a9\0\u29f8\0\u2a47\0\u2a96\0\u2ae5"+
    "\0\u2b34\0\u01da\0\u01da\0\u01da\0\u01da\0\u01da\0\u01da\0\u2b83"+
    "\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb"+
    "\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u3073"+
    "\0\u0278\0\u30c2\0\u3111\0\u3160\0\u31af\0\u31fe\0\u0278\0\u0278"+
    "\0\u0278\0\u324d\0\u0278\0\u329c\0\u32eb\0\u0278\0\u0278\0\u333a"+
    "\0\u0278\0\u3389\0\u33d8\0\u01da\0\u01da\0\u3427\0\u01da\0\u01da"+
    "\0\u3476\0\u34c5\0\u3514\0\u0278\0\u3563\0\u35b2\0\u3601\0\u3650"+
    "\0\u369f\0\u36ee\0\u373d\0\u0278\0\u0278\0\u378c\0\u37db\0\u0278"+
    "\0\u0278\0\u382a\0\u0278\0\u0278\0\u3879\0\u38c8\0\u3917\0\u3966"+
    "\0\u39b5\0\u01da\0\u0278\0\u3a04\0\u01da\0\u0278\0\u3a53\0\u0278"+
    "\0\u0278\0\u0278\0\u0278\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u3bde"+
    "\0\u3c2d\0\u0278\0\u3c7c\0\u3ccb\0\u3d1a\0\u3d69\0\u0278\0\u0278"+
    "\0\u3db8\0\u3e07\0\u3e56\0\u3ea5\0\u01da\0\u01da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\2\12\2\0\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\11\3\12\1\27\1\30\1\31\1\26\1\32"+
    "\1\26\2\7\1\33\1\12\1\34\1\12\1\11\1\35"+
    "\1\12\1\36\1\37\1\40\1\12\1\41\1\12\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\12\1\50\1\12"+
    "\1\51\1\12\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\12\1\100\2\0\3\100\2\0\1\100\1\101\7\100"+
    "\1\102\75\100\1\103\2\104\3\105\2\0\12\105\1\106"+
    "\14\105\1\103\54\105\1\107\1\110\1\105\1\103\2\104"+
    "\3\105\2\0\12\105\1\106\14\105\1\103\54\105\1\111"+
    "\1\107\1\105\1\112\6\113\1\0\12\113\1\114\71\113"+
    "\1\115\1\116\1\113\1\112\6\113\1\0\12\113\1\114"+
    "\71\113\1\111\1\117\1\113\122\0\1\11\20\0\1\11"+
    "\13\0\2\120\1\11\1\0\1\11\2\121\2\0\1\122"+
    "\1\123\47\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\1\13"+
    "\1\0\1\124\3\13\2\124\2\13\1\125\104\13\11\0"+
    "\1\126\110\0\3\12\4\0\1\12\1\127\4\12\3\0"+
    "\13\12\2\0\1\130\6\12\3\0\1\12\1\0\14\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\6\12"+
    "\1\131\4\12\2\0\7\12\3\0\1\12\1\0\14\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\5\12\1\132\1\12\3\0\1\12\1\0\14\12"+
    "\26\0\1\12\3\0\3\12\4\0\4\12\1\133\1\12"+
    "\3\0\5\12\1\134\5\12\2\0\7\12\3\0\1\12"+
    "\1\0\1\135\10\12\1\136\2\12\26\0\1\12\3\0"+
    "\3\12\4\0\1\12\1\137\4\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\13\12\2\0\1\140\6\12"+
    "\3\0\1\12\1\0\14\12\26\0\1\12\3\0\3\12"+
    "\4\0\6\12\3\0\6\12\2\31\3\12\2\0\7\12"+
    "\3\0\1\12\1\0\14\12\24\0\1\76\1\77\1\12"+
    "\3\0\3\12\4\0\1\12\1\141\1\12\1\142\2\12"+
    "\3\0\6\12\1\143\4\12\2\0\7\12\3\0\1\12"+
    "\1\0\14\12\26\0\1\12\3\0\3\12\4\0\6\12"+
    "\3\0\13\12\2\0\5\12\1\144\1\12\3\0\1\12"+
    "\1\0\4\12\1\145\7\12\24\0\1\76\1\77\1\12"+
    "\3\0\3\12\4\0\6\12\3\0\13\12\2\0\7\12"+
    "\3\0\1\12\1\0\14\12\24\0\1\76\1\77\1\12"+
    "\3\0\3\12\4\0\6\12\3\0\6\12\1\146\1\31"+
    "\3\12\2\0\7\12\3\0\1\12\1\0\14\12\24\0"+
    "\1\76\1\77\1\12\3\0\3\12\4\0\6\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\4\12\1\147"+
    "\7\12\26\0\1\12\3\0\1\150\7\0\1\151\10\0"+
    "\1\152\2\153\5\0\2\154\2\0\2\120\1\152\1\151"+
    "\1\152\2\121\2\0\1\122\1\123\47\0\3\12\4\0"+
    "\6\12\3\0\3\12\1\155\7\12\2\0\1\156\6\12"+
    "\3\0\1\12\1\0\14\12\26\0\1\12\101\0\1\157"+
    "\111\0\1\160\4\0\1\161\20\0\1\122\20\0\1\122"+
    "\15\0\1\122\1\0\1\122\55\0\3\12\4\0\6\12"+
    "\3\0\6\12\1\162\4\12\2\0\7\12\3\0\1\12"+
    "\1\0\14\12\26\0\1\12\3\0\3\12\4\0\6\12"+
    "\3\0\6\12\1\163\4\12\2\0\7\12\3\0\1\12"+
    "\1\0\4\12\1\164\7\12\26\0\1\12\3\0\3\12"+
    "\4\0\6\12\3\0\13\12\2\0\7\12\3\0\1\12"+
    "\1\0\4\12\1\165\7\12\26\0\1\12\3\0\3\12"+
    "\4\0\4\12\1\166\1\12\3\0\13\12\2\0\7\12"+
    "\3\0\1\12\1\0\1\167\13\12\26\0\1\12\3\0"+
    "\3\12\4\0\1\12\1\170\4\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\6\12\1\171\4\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\3\12\1\172\2\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\3\12\1\173\2\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\13\12\1\174\26\0\1\12"+
    "\70\0\1\175\10\0\1\176\106\0\1\177\7\0\1\200"+
    "\116\0\1\201\110\0\1\202\1\203\4\0\1\204\111\0"+
    "\1\205\4\0\1\206\116\0\1\207\116\0\1\210\116\0"+
    "\1\211\116\0\1\212\116\0\1\213\131\0\1\214\117\0"+
    "\1\215\12\0\1\216\110\0\3\105\2\0\12\105\1\0"+
    "\14\105\1\0\54\105\2\0\1\105\16\0\1\217\3\0"+
    "\1\220\1\221\1\222\2\223\1\0\1\224\1\225\2\0"+
    "\1\226\5\0\1\222\1\0\1\222\10\0\1\227\2\0"+
    "\1\230\33\0\1\231\1\232\1\233\1\0\6\113\1\0"+
    "\12\113\1\0\71\113\2\0\1\113\16\0\1\234\3\0"+
    "\1\235\1\236\1\237\2\240\1\0\1\241\1\242\2\0"+
    "\1\243\5\0\1\237\1\0\1\237\10\0\1\244\2\0"+
    "\1\245\33\0\1\246\1\247\1\250\114\0\1\251\117\0"+
    "\1\252\4\0\1\253\20\0\1\253\15\0\1\253\1\0"+
    "\1\253\2\0\2\254\51\0\1\122\20\0\1\122\15\0"+
    "\1\122\1\0\1\122\2\121\3\0\1\123\44\0\1\124"+
    "\1\0\10\124\1\255\104\124\1\13\1\0\1\124\3\13"+
    "\2\124\2\13\1\125\1\256\103\13\11\0\1\257\110\0"+
    "\3\12\4\0\4\12\1\260\1\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\13\12\2\0\7\12\3\0"+
    "\1\12\1\0\4\12\1\261\7\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\5\12\1\262\5\12\2\0"+
    "\1\263\6\12\3\0\1\12\1\0\14\12\26\0\1\12"+
    "\3\0\3\12\3\0\1\264\6\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\13\12\2\0\7\12\3\0"+
    "\1\12\1\0\2\12\1\265\11\12\26\0\1\12\3\0"+
    "\3\12\4\0\4\12\1\266\1\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\1\12\1\267\12\12\26\0"+
    "\1\12\3\0\3\12\4\0\1\12\1\270\4\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\6\12\1\271"+
    "\4\12\2\0\7\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\4\12\1\272\1\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\1\12\1\273\4\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\1\12\1\274\12\12\26\0"+
    "\1\12\3\0\3\12\4\0\3\12\1\275\2\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\5\12\1\276\1\12\3\0\1\12\1\0\14\12\24\0"+
    "\1\76\1\77\1\12\3\0\3\12\4\0\6\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\11\12\1\277"+
    "\2\12\26\0\1\12\3\0\1\150\20\0\1\150\15\0"+
    "\1\150\1\0\1\150\2\121\2\0\1\122\1\123\70\0"+
    "\1\300\15\0\1\300\1\0\1\300\55\0\1\150\20\0"+
    "\1\152\13\0\2\120\1\152\1\0\1\152\2\121\2\0"+
    "\1\122\1\123\47\0\1\301\6\0\1\301\1\0\1\301"+
    "\7\0\1\301\2\0\2\301\3\0\2\301\4\0\1\301"+
    "\1\0\3\301\10\0\2\301\100\0\1\302\1\0\1\302"+
    "\55\0\3\12\4\0\1\303\5\12\3\0\13\12\2\0"+
    "\5\12\1\304\1\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\3\12\1\305\2\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\1\306\13\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\7\12\3\0\1\12\1\0\10\12\1\307\3\12"+
    "\26\0\1\12\3\0\3\12\4\0\3\12\1\310\2\12"+
    "\3\0\13\12\2\0\7\12\3\0\1\12\1\0\14\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\7\12\3\0\1\12\1\0\1\311\13\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\1\312\6\12\3\0\1\12\1\0\14\12\26\0\1\12"+
    "\3\0\3\12\4\0\2\12\1\313\3\12\3\0\13\12"+
    "\2\0\7\12\3\0\1\12\1\0\14\12\26\0\1\12"+
    "\3\0\3\12\4\0\6\12\3\0\13\12\2\0\7\12"+
    "\3\0\1\12\1\0\1\314\13\12\26\0\1\12\3\0"+
    "\3\12\4\0\4\12\1\315\1\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\1\316\12\12\2\0\7\12"+
    "\3\0\1\12\1\0\14\12\26\0\1\12\3\0\3\12"+
    "\4\0\6\12\3\0\13\12\2\0\5\12\1\317\1\12"+
    "\3\0\1\12\1\0\14\12\26\0\1\12\3\0\3\12"+
    "\4\0\6\12\3\0\13\12\2\0\7\12\3\0\1\12"+
    "\1\0\1\12\1\320\12\12\26\0\1\12\3\0\3\12"+
    "\4\0\3\12\1\321\2\12\3\0\13\12\2\0\7\12"+
    "\3\0\1\12\1\0\14\12\26\0\1\12\101\0\1\322"+
    "\116\0\1\323\116\0\1\324\116\0\1\325\131\0\1\326"+
    "\117\0\1\327\12\0\1\330\110\0\2\331\5\0\6\331"+
    "\3\0\13\331\2\0\7\331\3\0\1\331\1\0\14\331"+
    "\26\0\1\331\24\0\1\332\15\0\1\332\1\0\1\332"+
    "\55\0\1\333\6\0\1\333\1\0\1\333\7\0\1\333"+
    "\2\0\2\333\3\0\2\333\4\0\1\333\1\0\3\333"+
    "\10\0\2\333\41\0\2\334\5\0\6\334\3\0\13\334"+
    "\2\0\7\334\3\0\1\334\1\0\14\334\26\0\1\334"+
    "\24\0\1\335\15\0\1\335\1\0\1\335\55\0\1\336"+
    "\6\0\1\336\1\0\1\336\7\0\1\336\2\0\2\336"+
    "\3\0\2\336\4\0\1\336\1\0\3\336\10\0\2\336"+
    "\152\0\1\107\117\0\1\107\4\0\1\253\20\0\1\253"+
    "\15\0\1\253\1\0\1\253\5\0\1\123\47\0\1\253"+
    "\20\0\1\253\15\0\1\253\1\0\1\253\52\0\1\124"+
    "\1\0\10\124\1\255\1\337\103\124\1\13\1\0\1\124"+
    "\3\13\2\124\2\13\1\125\1\13\1\340\102\13\11\0"+
    "\1\24\110\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\1\12\1\341\12\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\1\342\13\12\26\0\1\12"+
    "\16\0\1\343\103\0\3\12\4\0\1\12\1\344\4\12"+
    "\3\0\13\12\2\0\7\12\3\0\1\12\1\0\14\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\1\345\6\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\3\0\1\346\6\12\3\0\13\12"+
    "\2\0\7\12\3\0\1\12\1\0\14\12\26\0\1\12"+
    "\3\0\3\12\4\0\6\12\3\0\11\12\1\347\1\12"+
    "\2\0\7\12\3\0\1\12\1\0\14\12\26\0\1\12"+
    "\3\0\3\12\4\0\6\12\3\0\13\12\2\0\7\12"+
    "\3\0\1\12\1\0\4\12\1\350\7\12\26\0\1\12"+
    "\3\0\3\12\4\0\6\12\3\0\13\12\2\0\7\12"+
    "\3\0\1\12\1\0\11\12\1\351\2\12\26\0\1\12"+
    "\3\0\3\12\4\0\6\12\3\0\1\352\12\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\13\12\2\0\7\12\3\0"+
    "\1\12\1\0\1\353\13\12\26\0\1\12\3\0\3\12"+
    "\4\0\6\12\3\0\13\12\2\0\7\12\3\0\1\12"+
    "\1\0\4\12\1\354\7\12\26\0\1\12\3\0\3\12"+
    "\4\0\6\12\3\0\11\12\1\355\1\12\2\0\7\12"+
    "\3\0\1\12\1\0\14\12\26\0\1\12\24\0\1\300"+
    "\13\0\2\120\1\300\1\0\1\300\55\0\1\301\6\0"+
    "\1\301\1\0\1\301\7\0\1\301\2\0\2\301\3\0"+
    "\2\301\2\0\2\120\1\301\1\0\3\301\10\0\2\301"+
    "\76\0\2\120\1\302\1\0\1\302\55\0\3\12\4\0"+
    "\6\12\3\0\13\12\2\0\5\12\1\356\1\12\3\0"+
    "\1\12\1\0\14\12\26\0\1\12\3\0\3\12\4\0"+
    "\1\357\5\12\3\0\13\12\2\0\7\12\3\0\1\12"+
    "\1\0\14\12\26\0\1\12\3\0\3\12\4\0\6\12"+
    "\3\0\5\12\1\360\5\12\2\0\7\12\3\0\1\12"+
    "\1\0\14\12\26\0\1\12\3\0\3\12\4\0\6\12"+
    "\3\0\13\12\2\0\5\12\1\361\1\12\3\0\1\12"+
    "\1\0\14\12\26\0\1\12\3\0\3\12\4\0\4\12"+
    "\1\362\1\12\3\0\13\12\2\0\7\12\3\0\1\12"+
    "\1\0\14\12\26\0\1\12\3\0\3\12\4\0\6\12"+
    "\3\0\13\12\2\0\7\12\3\0\1\12\1\0\1\363"+
    "\13\12\26\0\1\12\3\0\3\12\4\0\6\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\1\364\13\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\5\12\1\365\1\12\3\0\1\12\1\0\14\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\5\12\1\366\1\12\3\0\1\12\1\0\14\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\5\12\1\367\1\12\3\0\1\12\1\0\14\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\1\370\6\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\13\12\1\371\26\0\1\12"+
    "\3\0\3\12\4\0\6\12\3\0\13\12\2\0\1\372"+
    "\6\12\3\0\1\12\1\0\14\12\26\0\1\12\11\0"+
    "\1\102\110\0\2\373\5\0\6\373\3\0\13\373\2\0"+
    "\7\373\3\0\1\373\1\0\14\373\26\0\1\373\24\0"+
    "\1\374\15\0\1\374\1\0\1\374\55\0\1\375\6\0"+
    "\1\375\1\0\1\375\7\0\1\375\2\0\2\375\3\0"+
    "\2\375\4\0\1\375\1\0\3\375\10\0\2\375\41\0"+
    "\2\376\5\0\6\376\3\0\13\376\2\0\7\376\3\0"+
    "\1\376\1\0\14\376\26\0\1\376\24\0\1\377\15\0"+
    "\1\377\1\0\1\377\55\0\1\u0100\6\0\1\u0100\1\0"+
    "\1\u0100\7\0\1\u0100\2\0\2\u0100\3\0\2\u0100\4\0"+
    "\1\u0100\1\0\3\u0100\10\0\2\u0100\36\0\1\124\1\0"+
    "\10\124\1\255\1\124\1\u0101\102\124\1\13\1\0\1\124"+
    "\3\13\2\124\2\13\1\125\2\13\1\u0102\101\13\3\0"+
    "\3\12\4\0\3\12\1\u0103\2\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\13\12\2\0\7\12\3\0"+
    "\1\12\1\0\1\u0104\13\12\26\0\1\12\13\0\1\u0105"+
    "\106\0\3\12\4\0\6\12\3\0\6\12\1\u0106\4\12"+
    "\2\0\7\12\3\0\1\12\1\0\14\12\26\0\1\12"+
    "\3\0\3\12\4\0\1\12\1\u0107\4\12\3\0\13\12"+
    "\2\0\7\12\3\0\1\12\1\0\14\12\26\0\1\12"+
    "\15\0\1\u0108\104\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\7\12\3\0\1\12\1\0\4\12\1\u0109\7\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\1\u010a\6\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\6\12\1\u010b"+
    "\4\12\2\0\7\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\5\12\1\u010c\1\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\7\12\1\u010d\4\12\26\0"+
    "\1\12\3\0\3\12\4\0\2\12\1\u010e\3\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\2\12\1\u010f\11\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\1\12\1\u0110\12\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\5\12\1\u0111\1\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\6\12\1\u0112"+
    "\4\12\2\0\7\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\2\12\1\u0113\3\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\5\12\1\u0114\1\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\2\u0115\5\0\6\u0115\3\0\13\u0115\2\0"+
    "\7\u0115\3\0\1\u0115\1\0\14\u0115\26\0\1\u0115\3\0"+
    "\2\u0116\5\0\6\u0116\3\0\13\u0116\2\0\7\u0116\3\0"+
    "\1\u0116\1\0\14\u0116\26\0\1\u0116\1\124\1\0\10\124"+
    "\1\255\2\124\1\u0117\101\124\1\13\1\0\1\124\3\13"+
    "\2\124\2\13\1\125\3\13\1\u0118\100\13\3\0\3\12"+
    "\4\0\4\12\1\u0119\1\12\3\0\13\12\2\0\7\12"+
    "\3\0\1\12\1\0\14\12\26\0\1\12\55\0\1\u011a"+
    "\44\0\3\12\4\0\6\12\3\0\13\12\2\0\7\12"+
    "\3\0\1\12\1\0\1\12\1\u011b\12\12\26\0\1\12"+
    "\3\0\3\12\4\0\1\u011c\5\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\16\0"+
    "\1\u011d\103\0\3\12\4\0\6\12\3\0\13\12\2\0"+
    "\1\u011e\6\12\3\0\1\12\1\0\14\12\26\0\1\12"+
    "\3\0\3\12\4\0\6\12\3\0\13\12\2\0\1\u011f"+
    "\6\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\4\12\1\u0120\1\12\3\0\13\12\2\0"+
    "\7\12\3\0\1\12\1\0\14\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\13\12\2\0\7\12\3\0"+
    "\1\12\1\0\4\12\1\u0121\7\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\13\12\2\0\7\12\3\0"+
    "\1\12\1\0\1\12\1\u0122\12\12\26\0\1\12\3\0"+
    "\3\12\4\0\6\12\3\0\13\12\2\0\7\12\3\0"+
    "\1\12\1\0\1\12\1\u0123\12\12\26\0\1\12\3\0"+
    "\2\u0124\5\0\6\u0124\3\0\13\u0124\2\0\7\u0124\3\0"+
    "\1\u0124\1\0\14\u0124\26\0\1\u0124\3\0\2\u0125\5\0"+
    "\6\u0125\3\0\13\u0125\2\0\7\u0125\3\0\1\u0125\1\0"+
    "\14\u0125\26\0\1\u0125\1\124\1\0\10\124\1\255\3\124"+
    "\1\u0126\100\124\1\13\1\0\1\124\3\13\2\124\2\13"+
    "\1\125\4\13\1\u0127\77\13\3\0\3\12\4\0\6\12"+
    "\3\0\1\u0128\12\12\2\0\7\12\3\0\1\12\1\0"+
    "\14\12\26\0\1\12\3\0\3\12\4\0\6\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\4\12\1\u0129"+
    "\7\12\26\0\1\12\3\0\3\12\4\0\6\12\3\0"+
    "\13\12\2\0\7\12\3\0\1\12\1\0\10\12\1\u012a"+
    "\3\12\26\0\1\12\3\0\2\u012b\5\0\6\u012b\3\0"+
    "\13\u012b\2\0\7\u012b\3\0\1\u012b\1\0\14\u012b\26\0"+
    "\1\u012b\3\0\2\u012c\5\0\6\u012c\3\0\13\u012c\2\0"+
    "\7\u012c\3\0\1\u012c\1\0\14\u012c\26\0\1\u012c\1\124"+
    "\1\0\10\124\1\255\4\124\1\u012d\77\124\1\13\1\0"+
    "\1\124\3\13\2\124\2\13\1\125\5\13\1\u012e\60\13"+
    "\1\u012e\15\13\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\5\12\1\u012f\1\12\3\0\1\12\1\0\14\12"+
    "\26\0\1\12\3\0\3\12\4\0\6\12\3\0\13\12"+
    "\2\0\1\u0130\6\12\3\0\1\12\1\0\14\12\26\0"+
    "\1\12\3\0\2\u0131\5\0\6\u0131\3\0\13\u0131\2\0"+
    "\7\u0131\3\0\1\u0131\1\0\14\u0131\26\0\1\u0131\3\0"+
    "\2\u0132\5\0\6\u0132\3\0\13\u0132\2\0\7\u0132\3\0"+
    "\1\u0132\1\0\14\u0132\26\0\1\u0132\1\124\1\0\10\124"+
    "\1\255\5\124\1\u012e\60\124\1\u012e\15\124\1\u012e\1\0"+
    "\115\u012e\3\0\2\u0133\5\0\6\u0133\3\0\13\u0133\2\0"+
    "\7\u0133\3\0\1\u0133\1\0\14\u0133\26\0\1\u0133\3\0"+
    "\2\u0134\5\0\6\u0134\3\0\13\u0134\2\0\7\u0134\3\0"+
    "\1\u0134\1\0\14\u0134\26\0\1\u0134\3\0\2\u0135\5\0"+
    "\6\u0135\3\0\13\u0135\2\0\7\u0135\3\0\1\u0135\1\0"+
    "\14\u0135\26\0\1\u0135\3\0\2\u0136\5\0\6\u0136\3\0"+
    "\13\u0136\2\0\7\u0136\3\0\1\u0136\1\0\14\u0136\26\0"+
    "\1\u0136";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16116];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\2\11\12\1\3\11\13\1\1\11\20\1"+
    "\1\11\2\1\11\11\2\1\1\11\1\1\3\11\2\1"+
    "\4\11\3\1\1\11\1\1\1\11\1\0\1\1\1\11"+
    "\1\0\1\1\1\0\21\1\2\0\1\1\2\0\2\1"+
    "\3\11\14\1\1\11\1\1\2\11\1\1\2\11\1\1"+
    "\6\11\3\0\2\11\3\0\12\11\3\0\10\11\2\0"+
    "\1\1\2\0\1\1\1\0\4\1\1\0\35\1\6\11"+
    "\10\0\3\1\1\0\2\1\1\0\24\1\1\0\2\11"+
    "\1\0\2\11\1\0\3\1\1\0\2\1\1\0\14\1"+
    "\3\0\2\1\1\11\2\1\1\11\10\1\1\0\4\1"+
    "\3\0\3\1\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

int num_tab; /* numero di tab */
int s;  /* valore testa stack temporaneo */
int dedent; /*n numero di dedent */
int flag = 0; /* */


 StringBuffer string_buffer = new StringBuffer();
 StringBuffer string_prefix = new StringBuffer();
 Stack<Integer> stack = new Stack<Integer>();
 HashMap<Integer,String> StringList= new HashMap<Integer,String>();
 HashMap<Integer,String> IdentifierList= new HashMap<Integer,String>();
 HashMap<Integer,String> NumericList= new HashMap<Integer,String>();

  public int curr_line(){
        return yyline;
    }
     public int curr_col(){
        return yycolumn;
    }


Symbol newSym(int tokenId) {
    return new Symbol(tokenId, yyline, yycolumn);
}

Symbol newSym(int tokenId, Object value) {
    return new Symbol(tokenId, yyline, yycolumn, value);
}






  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 228) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case YYINITIAL: {
              if(stack.isEmpty()) {return newSym(sym.EOF);
					}
					else{
							stack.pop();
							return newSym(sym.DEDENT);
					}
            }
            case 311: break;
            case SHORT_STRING_S: {
              yybegin(YYINITIAL); return newSym(sym.ERROR,"EOL while scanning string literal");
            }
            case 312: break;
            case SHORT_STRING_D: {
              yybegin(YYINITIAL); return newSym(sym.ERROR,"EOL while scanning string literal");
            }
            case 313: break;
            case LONG_STRING_S: {
              yybegin(YYINITIAL); return newSym(sym.ERROR,"EOL while scanning string literal");
            }
            case 314: break;
            case LONG_STRING_D: {
              yybegin(YYINITIAL); return newSym(sym.ERROR,"EOL while scanning string literal");
            }
            case 315: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { string_buffer.append(yytext());
            }
          case 136: break;
          case 2: 
            { return newSym(sym.ERROR,yytext());
            }
          case 137: break;
          case 3: 
            { return newSym(sym.NEWLINE);
            }
          case 138: break;
          case 4: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 				}     	
				NumericList.put(yytext().hashCode(),yytext());
				return newSym(sym.INT,yytext());
            }
          case 139: break;
          case 5: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 					}     
					IdentifierList.put(yytext().hashCode(),yytext());
					return newSym(sym.IDENT,yytext());
            }
          case 140: break;
          case 6: 
            { /* Stampo il commento  */
                  System.out.println("Commento: " + yytext());
            }
          case 141: break;
          case 7: 
            { /* Gli spazi bianchi vengono ignorati */
            }
          case 142: break;
          case 8: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.COLON);
            }
          case 143: break;
          case 9: 
            { if(yycolumn == 0){
							num_tab=1;
							flag=1;
							yybegin(INDENTATION);
			}
            }
          case 144: break;
          case 10: 
            { if(!stack.isEmpty() && yycolumn==0){
 													yypushback(yytext().length()); 
 													stack.pop();
 											return newSym(sym.DEDENT);
 					}     
 					return newSym(sym.EXLINE);
            }
          case 145: break;
          case 11: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.PLUS);
            }
          case 146: break;
          case 12: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.MINUS);
            }
          case 147: break;
          case 13: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.DOT);
            }
          case 148: break;
          case 14: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 					}     
					return newSym(sym.ERROR,yytext());
            }
          case 149: break;
          case 15: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.MULT);
            }
          case 150: break;
          case 16: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.DIV);
            }
          case 151: break;
          case 17: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.MOD);
            }
          case 152: break;
          case 18: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.LT);
            }
          case 153: break;
          case 19: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.GT);
            }
          case 154: break;
          case 20: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.B_AND);
            }
          case 155: break;
          case 21: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.B_OR);
            }
          case 156: break;
          case 22: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.B_XOR);
            }
          case 157: break;
          case 23: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.B_O_COMP);
            }
          case 158: break;
          case 24: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}      
 			return newSym(sym.EQ);
            }
          case 159: break;
          case 25: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.LPAR);
            }
          case 160: break;
          case 26: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.RPAR);
            }
          case 161: break;
          case 27: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.LSB);
            }
          case 162: break;
          case 28: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.RSB);
            }
          case 163: break;
          case 29: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.LBRACE);
            }
          case 164: break;
          case 30: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.RBRACE);
            }
          case 165: break;
          case 31: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.COMMA);
            }
          case 166: break;
          case 32: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.SEMI);
            }
          case 167: break;
          case 33: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.AT);
            }
          case 168: break;
          case 34: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 					}     
					string_buffer.setLength(0); 
					string_prefix.setLength(0);
					string_prefix.append(yytext().toLowerCase());
					if(yytext().toLowerCase().indexOf('u') >=0)  {
					 	string_buffer.append("u");
					}
					string_buffer.append("'");
					yybegin(SHORT_STRING_S);
            }
          case 169: break;
          case 35: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 						}     
						string_buffer.setLength(0);
					 	string_prefix.setLength(0);
					 	string_prefix.append(yytext().toLowerCase());
						 if(yytext().toLowerCase().indexOf('u') >=0) {
					 		string_buffer.append("u");
						 }
					 	string_buffer.append("'");
					 	yybegin(SHORT_STRING_D);
            }
          case 170: break;
          case 36: 
            { if(stack.isEmpty()){
	   				s = 0;
		}
		else { 
					s = stack.peek();
		}
		

		if(s < num_tab && flag==1){	
						yybegin(YYINITIAL);
						yypushback(1);
						stack.push(num_tab);
						return newSym(sym.INDENT);
		}		
		else if (s > num_tab && !stack.isEmpty()){
								flag = 0;
								yypushback(1);
								stack.pop();
							
								return newSym(sym.DEDENT);

						
						

		}
		else if(s == num_tab ){
								yybegin(YYINITIAL);
								yypushback(1);
						}
		else{					yybegin(YYINITIAL);
								yypushback(1);
								return newSym(sym.ERROR,"Inconsistent dedent");
						}
            }
          case 171: break;
          case 37: 
            { num_tab++;
            }
          case 172: break;
          case 38: 
            { yybegin(YYINITIAL); return newSym(sym.ERROR,"Non-ASCII character "+yytext());
            }
          case 173: break;
          case 39: 
            { yybegin(YYINITIAL); return newSym(sym.ERROR,"EOL while scanning string literal");
            }
          case 174: break;
          case 40: 
            { string_buffer.append("\\");
            }
          case 175: break;
          case 41: 
            { yybegin(YYINITIAL);
					string_buffer.append("'");
					StringList.put(string_buffer.toString().hashCode(),string_buffer.toString());
					return newSym(sym.STRING,string_buffer.toString());
            }
          case 176: break;
          case 42: 
            { string_buffer.append('"');
            }
          case 177: break;
          case 43: 
            { string_buffer.append("'");
            }
          case 178: break;
          case 44: 
            { yybegin(YYINITIAL); return newSym(sym.ERROR,"Non-ASCII character"+yytext());
            }
          case 179: break;
          case 45: 
            { if(!stack.isEmpty() && yycolumn==0){
 													yypushback(yytext().length()); 
 													stack.pop();
 											return newSym(sym.DEDENT);
 					}     
					NumericList.put(yytext().hashCode(),yytext());
					return newSym(sym.LONG_INT,yytext());
            }
          case 180: break;
          case 46: 
            { if(!stack.isEmpty() && yycolumn==0){
 													yypushback(yytext().length()); 
 													stack.pop();
 											return newSym(sym.DEDENT);
 					}
 					NumericList.put(yytext().hashCode(),yytext());
					return newSym(sym.FLOAT,yytext());
            }
          case 181: break;
          case 47: 
            { if(!stack.isEmpty() && yycolumn==0){
 													yypushback(yytext().length()); 
 													stack.pop();
 											return newSym(sym.DEDENT);
 					}      	
 					NumericList.put(yytext().hashCode(),yytext());
					return newSym(sym.IMAG_NUMB,yytext());
            }
          case 182: break;
          case 48: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.OR);
            }
          case 183: break;
          case 49: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}
 				return newSym(sym.IN);
            }
          case 184: break;
          case 50: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.IF);
            }
          case 185: break;
          case 51: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.IS);
            }
          case 186: break;
          case 52: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.PLUS_EQ);
            }
          case 187: break;
          case 53: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.ARROW);
            }
          case 188: break;
          case 54: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.MINUS_EQ);
            }
          case 189: break;
          case 55: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}    
 			return newSym(sym.AS);
            }
          case 190: break;
          case 56: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.POW);
            }
          case 191: break;
          case 57: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.MULT_EQ);
            }
          case 192: break;
          case 58: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.F_DIV);
            }
          case 193: break;
          case 59: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.DIV_EQ);
            }
          case 194: break;
          case 60: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.MOD_EQ);
            }
          case 195: break;
          case 61: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.BLS);
            }
          case 196: break;
          case 62: 
            { if(!stack.isEmpty() && yycolumn==0){
                      yypushback(yytext().length()); 
                      stack.pop();
                      return newSym(sym.DEDENT);
      }     
      return newSym(sym.NEQQ);
            }
          case 197: break;
          case 63: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.LET);
            }
          case 198: break;
          case 64: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.BRS);
            }
          case 199: break;
          case 65: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.GET);
            }
          case 200: break;
          case 66: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
			return newSym(sym.B_AND_EQ);
            }
          case 201: break;
          case 67: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.B_OR_EQ);
            }
          case 202: break;
          case 68: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.B_XOR_EQ);
            }
          case 203: break;
          case 69: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.EQEQ);
            }
          case 204: break;
          case 70: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.NEQ);
            }
          case 205: break;
          case 71: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\n");
							break;
						case "u":
							string_buffer.append("\n");
							break;	
						case "r":
							string_buffer.append("\\n");
							break;
						case "ur":
							string_buffer.append("\\n");
							break;
						case "br":
							string_buffer.append("\\n");
							break;
						default:
							string_buffer.append("\n");
							break;	
					}
            }
          case 206: break;
          case 72: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\\\\");
							break;
						case "u":
							string_buffer.append("\\\\");
							break;	
						case "r":
							string_buffer.append("\\\\\\\\");
							break;
						case "ur":
							string_buffer.append("\\\\\\\\");
							break;
						case "br":
							string_buffer.append("\\\\\\\\");
							break;
						default:
							string_buffer.append("\\\\");
							break;	
					}
            }
          case 207: break;
          case 73: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\u000c");
							break;
						case "u":
							string_buffer.append("\u000c");
							break;	
						case "r":
							System.out.println('3');
							string_buffer.append("\\f");
							break;
						case "ur":
							System.out.println('4');
							string_buffer.append("\\f");
							break;
						case "br":
							System.out.println('5');
							string_buffer.append("\\f");
							break;
						default:
							System.out.println('6');
							string_buffer.append("\u000c");
							break;	
					}
            }
          case 208: break;
          case 74: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\r");
							break;
						case "u":
							string_buffer.append("\r");
							break;	
						case "r":
							string_buffer.append("\\r");
							break;
						case "ur":
							string_buffer.append("\\r");
							break;
						case "br":
							string_buffer.append("\\r");
							break;
						default:
							string_buffer.append("\r");
							break;	
					}
            }
          case 209: break;
          case 75: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\u0008");
							break;
						case "u":
							string_buffer.append("\u0008");
							break;	
						case "r":
							string_buffer.append("\\b");
							break;
						case "ur":
							string_buffer.append("\\b");
							break;
						case "br":
							string_buffer.append("\\b");
							break;
						default:
							string_buffer.append("\u0008");
							break;	
					}
            }
          case 210: break;
          case 76: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\t");
							break;
						case "u":
							string_buffer.append("\t");
							break;	
						case "r":
							string_buffer.append("\\t");
							break;
						case "ur":
							string_buffer.append("\\t");
							break;
						case "br":
							string_buffer.append("\\t");
							break;
						default:
							string_buffer.append("\t");
							break;	
					}
            }
          case 211: break;
          case 77: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\u0007");
							break;
						case "u":
							string_buffer.append("\u0007");
							break;	
						case "r":
							string_buffer.append("\\a");
							break;
						case "ur":
							string_buffer.append("\\a");
							break;
						case "br":
							string_buffer.append("\\a");
							break;
						default:
							string_buffer.append("\u0007");
							break;	
					}
            }
          case 212: break;
          case 78: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("'");
							break;
						case "u":
							string_buffer.append("'");
							break;	
						case "r":
							string_buffer.append("\\'");
							break;
						case "ur":
							string_buffer.append("\\'");
							break;
						case "br":
							string_buffer.append("\\'");
							break;
						default:
							string_buffer.append("'");
							break;	
					}
            }
          case 213: break;
          case 79: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append('"');
							break;
						case "u":
							string_buffer.append('"');
							break;	
						case "r":
							string_buffer.append("\\\\");
							string_buffer.append('"');
							break;
						case "ur":
							string_buffer.append("\\\\");
							string_buffer.append('"');
							break;
						case "br":
							string_buffer.append("\\\\");
							string_buffer.append('"');
							break;
						default:
							string_buffer.append('"');
							break;	
					}
            }
          case 214: break;
          case 80: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\u000b");
							break;
						case "u":
							string_buffer.append("\u000b");
							break;	
						case "r":
							string_buffer.append("\\v");
							break;
						case "ur":
							string_buffer.append("\\v");
							break;
						case "br":
							string_buffer.append("\\v");
							break;
						default:
							string_buffer.append("\u000b");
							break;	
					}
            }
          case 215: break;
          case 81: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\n");
							break;
						case "u":
							string_buffer.append("\n");
							break;	
						case "r":
							string_buffer.append("\\n");
							break;
						case "ur":
							string_buffer.append("\\n");
							break;
						case "br":
							string_buffer.append("\\n");
							break;
						default:
							string_buffer.append("\n");
							break;	
					}
            }
          case 216: break;
          case 82: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\\\\");
							break;
						case "u":
							string_buffer.append("\\\\");
							break;	
						case "r":
							string_buffer.append("\\\\\\\\");
							break;
						case "ur":
							string_buffer.append("\\\\\\\\");
							break;
						case "br":
							string_buffer.append("\\\\\\\\");
							break;
						default:
							string_buffer.append("\\\\");
							break;	
					}
            }
          case 217: break;
          case 83: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\u000c");
							break;
						case "u":
							string_buffer.append("\u000c");
							break;	
						case "r":
							System.out.println('3');
							string_buffer.append("\\f");
							break;
						case "ur":
							System.out.println('4');
							string_buffer.append("\\f");
							break;
						case "br":
							System.out.println('5');
							string_buffer.append("\\f");
							break;
						default:
							System.out.println('6');
							string_buffer.append("\u000c");
							break;	
					}
            }
          case 218: break;
          case 84: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\r");
							break;
						case "u":
							string_buffer.append("\r");
							break;	
						case "r":
							string_buffer.append("\\r");
							break;
						case "ur":
							string_buffer.append("\\r");
							break;
						case "br":
							string_buffer.append("\\r");
							break;
						default:
							string_buffer.append("\r");
							break;	
					}
            }
          case 219: break;
          case 85: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\u0008");
							break;
						case "u":
							string_buffer.append("\u0008");
							break;	
						case "r":
							string_buffer.append("\\b");
							break;
						case "ur":
							string_buffer.append("\\b");
							break;
						case "br":
							string_buffer.append("\\b");
							break;
						default:
							string_buffer.append("\u0008");
							break;	
					}
            }
          case 220: break;
          case 86: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\t");
							break;
						case "u":
							string_buffer.append("\t");
							break;	
						case "r":
							string_buffer.append("\\t");
							break;
						case "ur":
							string_buffer.append("\\t");
							break;
						case "br":
							string_buffer.append("\\t");
							break;
						default:
							string_buffer.append("\t");
							break;	
					}
            }
          case 221: break;
          case 87: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\u0007");
							break;
						case "u":
							string_buffer.append("\u0007");
							break;	
						case "r":
							string_buffer.append("\\a");
							break;
						case "ur":
							string_buffer.append("\\a");
							break;
						case "br":
							string_buffer.append("\\a");
							break;
						default:
							string_buffer.append("\u0007");
							break;	
					}
            }
          case 222: break;
          case 88: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("'");
							break;
						case "u":
							string_buffer.append("'");
							break;	
						case "r":
							string_buffer.append("\\'");
							break;
						case "ur":
							string_buffer.append("\\'");
							break;
						case "br":
							string_buffer.append("\\'");
							break;
						default:
							string_buffer.append("'");
							break;	
					}
            }
          case 223: break;
          case 89: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append('"');
							break;
						case "u":
							string_buffer.append('"');
							break;	
						case "r":
							string_buffer.append("\\\\");
							string_buffer.append('"');
							break;
						case "ur":
							string_buffer.append("\\\\");
							string_buffer.append('"');
							break;
						case "br":
							string_buffer.append("\\\\");
							string_buffer.append('"');
							break;
						default:
							string_buffer.append('"');
							break;	
					}
            }
          case 224: break;
          case 90: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\u000b");
							break;
						case "u":
							string_buffer.append("\u000b");
							break;	
						case "r":
							string_buffer.append("\\v");
							break;
						case "ur":
							string_buffer.append("\\v");
							break;
						case "br":
							string_buffer.append("\\v");
							break;
						default:
							string_buffer.append("\u000b");
							break;	
					}
            }
          case 225: break;
          case 91: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}      
 			return newSym(sym.DEF);
            }
          case 226: break;
          case 92: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}      
 			return newSym(sym.DEL);
            }
          case 227: break;
          case 93: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.NOT);
            }
          case 228: break;
          case 94: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}
 			return newSym(sym.FOR);
            }
          case 229: break;
          case 95: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.TRY);
            }
          case 230: break;
          case 96: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length());
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}    
 			return newSym(sym.AND);
            }
          case 231: break;
          case 97: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.POW_EQ);
            }
          case 232: break;
          case 98: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.F_DIV_EQ);
            }
          case 233: break;
          case 99: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.BLS_EQ);
            }
          case 234: break;
          case 100: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}     
 			return newSym(sym.BRS_EQ);
            }
          case 235: break;
          case 101: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 							}     
							string_buffer.setLength(0); 
							string_prefix.setLength(0);
							string_prefix.append(yytext().toLowerCase());
					 		if(yytext().toLowerCase().indexOf('u') >=0) {
					 			string_buffer.append("u");
					 		}	
					 		string_buffer.append("'");
							yybegin(LONG_STRING_S);
            }
          case 236: break;
          case 102: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 							}     
							string_buffer.setLength(0); 
							string_prefix.setLength(0);
							string_prefix.append(yytext().toLowerCase());
					 		if(yytext().toLowerCase().indexOf('u') >=0) 	 {
					 			string_buffer.append("u");
							}
							string_buffer.append("'");
							yybegin(LONG_STRING_D);
            }
          case 237: break;
          case 103: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.FROM);
            }
          case 238: break;
          case 104: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}   
 			return newSym(sym.EXEC);
            }
          case 239: break;
          case 105: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}      
 			return newSym(sym.ELIF);
            }
          case 240: break;
          case 106: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}    
 			return newSym(sym.ELSE);
            }
          case 241: break;
          case 107: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.PASS);
            }
          case 242: break;
          case 108: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}    
 			return newSym(sym.NONE);
            }
          case 243: break;
          case 109: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			} 
 			return newSym(sym.TRUE);
            }
          case 244: break;
          case 110: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.WITH);
            }
          case 245: break;
          case 111: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append(yytext().toString());
							break;
						case "u":
							string_buffer.append(yytext().toString());
							break;	
						case "r":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						case "ur":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						case "br":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						default:
							string_buffer.append(yytext().toString());
							break;	
					}
            }
          case 246: break;
          case 112: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;
						case "u":
							string_buffer.append("\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;	
						case "r":
							string_buffer.append("\\\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;
						case "ur":
							string_buffer.append("\\\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;
						case "br":
							string_buffer.append("\\\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;
						default:
							string_buffer.append("\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;	
					}
            }
          case 247: break;
          case 113: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append(yytext().toString());
							break;
						case "u":
							string_buffer.append(yytext().toString());
							break;	
						case "r":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						case "ur":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						case "br":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						default:
							string_buffer.append(yytext().toString());
							break;	
					}
            }
          case 248: break;
          case 114: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;
						case "u":
							string_buffer.append("\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;	
						case "r":
							string_buffer.append("\\\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;
						case "ur":
							string_buffer.append("\\\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;
						case "br":
							string_buffer.append("\\\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;
						default:
							string_buffer.append("\\u00");
							string_buffer.append(yytext().toString().substring(2,4));
							break;	
					}
            }
          case 249: break;
          case 115: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}
 				return newSym(sym.CLASS);
            }
          case 250: break;
          case 116: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.RAISE);
            }
          case 251: break;
          case 117: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
												stack.pop();
 											return newSym(sym.DEDENT);
				}    
				return newSym(sym.BREAK);
            }
          case 252: break;
          case 118: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}   
 			return newSym(sym.PRINT);
            }
          case 253: break;
          case 119: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 			}   
 			return newSym(sym.FALSE);
            }
          case 254: break;
          case 120: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.YIELD);
            }
          case 255: break;
          case 121: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.WHILE);
            }
          case 256: break;
          case 122: 
            { if(!stack.isEmpty() && yycolumn==0){
                      yypushback(yytext().length()); 
                      stack.pop();
                      return newSym(sym.DEDENT);
      }   
      return newSym(sym.IS_NOT);
            }
          case 257: break;
          case 123: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.IMPORT);
            }
          case 258: break;
          case 124: 
            { if(!stack.isEmpty() && yycolumn==0){
                      yypushback(yytext().length()); 
                      stack.pop();
                      return newSym(sym.DEDENT);
      }   
      return newSym(sym.NOT_IN);
            }
          case 259: break;
          case 125: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.GLOBAL);
            }
          case 260: break;
          case 126: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.RETURN);
            }
          case 261: break;
          case 127: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.LAMBDA);
            }
          case 262: break;
          case 128: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 			}      
 			return newSym(sym.EXCEPT);
            }
          case 263: break;
          case 129: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}    
 				return newSym(sym.ASSERT);
            }
          case 264: break;
          case 130: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-1)){
						case "":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						case "u":
							string_buffer.append(yytext().toString());
							break;	
						case "r":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						case "ur":
							string_buffer.append(yytext().toString());
							break;
						case "br":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						default:
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;	
					}
            }
          case 265: break;
          case 131: 
            { switch((string_prefix.toString()).substring(0,(string_prefix.toString()).length()-3)){
						case "":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						case "u":
							string_buffer.append(yytext().toString());
							break;	
						case "r":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						case "ur":
							string_buffer.append(yytext().toString());
							break;
						case "br":
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;
						default:
							string_buffer.append("\\");
							string_buffer.append(yytext().toString());
							break;	
					}
            }
          case 266: break;
          case 132: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}
 			    return newSym(sym.FINALLY);
            }
          case 267: break;
          case 133: 
            { if(yyline < 2){
                  						System.out.println("Dichiarazione di codifica: " + yytext()); 
                  				}
                  				else {
                  						System.out.println("Commento: " + yytext());
                  				}
            }
          case 268: break;
          case 134: 
            { if(!stack.isEmpty() && yycolumn==0){
 											yypushback(yytext().length()); 
 											stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.CONTINUE);
            }
          case 269: break;
          case 135: 
            { if(!stack.isEmpty() && yycolumn==0){
 												yypushback(yytext().length()); 
 												stack.pop();
 											return newSym(sym.DEDENT);
 				}      
 				return newSym(sym.NONLOCAL);
            }
          case 270: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
